name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

env:
  TF_VAR_access_key_id: ${{ secrets.SCW_ACCESS_KEY_ID }}
  TF_VAR_secret_key: ${{ secrets.SCW_ACCESS_KEY }}
  TF_VAR_project_id: ${{ secrets.SCW_PROJECT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.SCW_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
  CERT_CRT: ${{ secrets.CERT_CRT }}
  CERT_KEY: ${{ secrets.CERT_KEY }}

jobs:
  deployment:
    name: "Deployment"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      INFRA_WORKING_DIRECTORY: packages/infrastructure/project
      BACKEND_WORKING_DIRECTORY: packages/backend
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to Scaleway Container Registry
        uses: docker/login-action@v2
        with:
          registry: rg.fr-par.scw.cloud/app-namespace
          username: ${{ secrets.SCW_ACCESS_KEY_ID }}
          password: ${{ secrets.SCW_ACCESS_KEY }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: rg.fr-par.scw.cloud/app-namespace/backend
          tags: |
            latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.BACKEND_WORKING_DIRECTORY }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Extract second tag (sha)
        id: extract-tag
        run: |
          TAGS=(${{ steps.meta.outputs.tags }})
          echo "::set-output name=second-tag::${TAGS[1]}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.INFRA_WORKING_DIRECTORY }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.INFRA_WORKING_DIRECTORY }}

      - name: Creating certificate
        run: |
          mkdir -p certs
          echo "${{ env.CERT_CRT }}" > certs/server.crt
          echo "${{ env.CERT_KEY }}" > certs/server.key
        working-directory: ${{ env.INFRA_WORKING_DIRECTORY }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.INFRA_WORKING_DIRECTORY }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_VAR_backend_image=${{ steps.extract-tag.outputs.second-tag }}
          terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ${{ env.INFRA_WORKING_DIRECTORY }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.INFRA_WORKING_DIRECTORY }}
