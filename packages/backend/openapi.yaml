openapi: 3.0.0
paths:
  /health:
    get:
      operationId: AppController_getHealth
      summary: "[Public] Check if the server is alive"
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - App
  "/users/limited/{id}":
    get:
      operationId: UsersController_getUser
      summary: "[User] get user"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        &a1
        - Users
  /users/me:
    put:
      operationId: UsersController_updateMe
      summary: "[User] Update self"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMeDto"
      responses:
        "200":
          description: ""
      tags: *a1
  /users/track:
    get:
      operationId: UsersController_setMediaCurrentTime
      summary: "[User] Set media track properties"
      parameters:
        - name: mediaId
          required: true
          in: query
          description: Id of the played media
          example: "98167639264982"
          schema:
            type: string
        - name: time
          required: true
          in: query
          description: Current play time of the movie or episode
          example: "40"
          schema:
            type: string
        - name: ai
          required: true
          in: query
          description: Current audio track index of the movie or episode
          example: "1"
          schema:
            type: string
        - name: ti
          required: true
          in: query
          description: Current text track index of the movie or episode
          example: "1"
          schema:
            type: string
        - name: si
          required: true
          in: query
          description: Season index of the movie or episode
          example: "0"
          schema:
            type: string
        - name: ei
          required: true
          in: query
          description: Episode index of the movie or episode
          example: "0"
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a1
  "/users/insights/{uniqueId}":
    get:
      operationId: UsersController_getProfileInsights
      summary: "[User] Get profile insights"
      parameters:
        - name: uniqueId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a1
  /users/profile:
    delete:
      operationId: UsersController_deleteProfile
      summary: "[User] Delete profile"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a1
    post:
      operationId: UsersController_createUserProfile
      summary: "[User] Create a new user profile"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProfileDto"
      responses:
        "201":
          description: ""
      tags: *a1
  /users/profile/current:
    get:
      operationId: UsersController_getCurrentUserProfile
      summary: "[User] Set media track properties"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a1
  "/users/profile/{uniqueId}":
    get:
      operationId: UsersController_getUserProfile
      summary: "[User] Set media track properties"
      parameters:
        - name: uniqueId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a1
    put:
      operationId: UsersController_updateUserProfile
      summary: "[User] Update a specific user profile"
      parameters:
        - name: uniqueId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProfileDto"
      responses:
        "200":
          description: ""
      tags: *a1
  /users/profiles:
    get:
      operationId: UsersController_getUserProfiles
      summary: "[User] Get all profiles of the user"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a1
  /users/playerStatus:
    get:
      operationId: UsersController_getPlayerStatus
      summary: "[User] Get current player status"
      parameters:
        - name: mediaId
          required: true
          in: query
          description: Id of the played media
          example: "98167639264982"
          schema:
            type: string
        - name: si
          required: true
          in: query
          description: Season index of the movie or episode
          example: "0"
          schema:
            type: string
        - name: ei
          required: true
          in: query
          description: Episode index of the movie or episode
          example: "0"
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a1
  "/users/picture/{uniqueId}/{hash}":
    get:
      operationId: UsersController_profilePicture
      summary: "[User] Get profile picture from userId"
      parameters:
        - name: uniqueId
          required: true
          in: path
          schema:
            type: string
        - name: hash
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a1
  /users/profile-picture:
    post:
      operationId: UsersController_uploadProfilePicture
      summary: "[User] Upload a profile picture"
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        "201":
          description: ""
      tags: *a1
  /users/admin:
    get:
      operationId: UsersAdminController_getUsers
      summary: "[Admin] Get all users"
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        &a2
        - Users Admin
    post:
      operationId: UsersAdminController_createUser
      summary: "[Admin] Create new user"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: ""
      tags: *a2
  "/users/admin/{id}":
    get:
      operationId: UsersAdminController_getUser
      summary: "[Admin] Get specific user"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a2
    put:
      operationId: UsersAdminController_updateUser
      summary: "[Admin] Update specific user"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: ""
      tags: *a2
    delete:
      operationId: UsersAdminController_deleteUser
      summary: "[Admin] Delete specific user"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a2
  "/users/admin/activate/{id}":
    get:
      operationId: UsersAdminController_activateUser
      summary: "[Admin] Activate specific user"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a2
  "/users/admin/refuse/{id}":
    get:
      operationId: UsersAdminController_refuseUser
      summary: "[Admin] Refuse specific user"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a2
  /auth/login:
    post:
      operationId: AuthController_login
      summary: "[Public] Login using credentials"
      parameters: []
      requestBody:
        required: true
        description: Login data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginAuthDto"
      responses:
        "200":
          description: Login successful
          headers:
            Set-Cookie:
              description: Authorization cookie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUser"
        "401":
          description: Login failed - Bad credentials
      tags:
        &a3
        - Auth
  "/auth/switchProfile/{uniqueId}":
    get:
      operationId: AuthController_switchUserProfile
      summary: "[User] Get a cookie for a specific profile"
      parameters:
        - name: uniqueId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a3
  /auth/logout:
    get:
      operationId: AuthController_logout
      summary: "[Public] Reset current cookie"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a3
  /auth/register:
    post:
      operationId: AuthController_register
      summary: "[Public] Register standalone/organization"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterAuthDto"
      responses:
        "201":
          description: Register successful
          headers:
            Set-Cookie:
              description: Authorization cookie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUser"
        "403":
          description: Register failed - Email already exists
      tags: *a3
  /auth/refresh-tokens:
    get:
      operationId: AuthController_regenerateTokens
      summary: "[User] Get a new jwt using refresh token"
      parameters: []
      responses:
        "200":
          description: Refresh token successful
          headers:
            Set-Cookie:
              description: Authorization cookie
        "401":
          description: Refresh token failed - Expired token or not logged in
      tags: *a3
      security:
        - cookie: []
  /auth/me:
    get:
      operationId: AuthController_getProfile
      summary: "[User] Get the currently logged user"
      parameters: []
      responses:
        "200":
          description: Current logged user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUser"
        "401":
          description: Not logged in
      tags: *a3
      security:
        - cookie: []
  /auth/reset-password:
    post:
      operationId: AuthController_resetPassword
      summary: "[Public] Trigger reset-password procedure"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordDto"
      responses:
        "201":
          description: ""
      tags: *a3
  /auth/change-password:
    post:
      operationId: AuthController_changePassword
      summary: "[Public] Change the password using token"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordAuthDto"
      responses:
        "201":
          description: ""
      tags: *a3
  /medias:
    get:
      operationId: MediasController_getMedias
      summary: "[User] Get all medias sorted by titles"
      parameters:
        - name: skip
          required: false
          in: query
          schema:
            type: number
        - name: limit
          required: false
          in: query
          schema:
            type: number
        - name: type
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        &a4
        - Medias
  /medias/categories:
    get:
      operationId: MediasController_getAllCategories
      summary: "[User] Get all categories"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a4
  /medias/category/*:
    get:
      operationId: MediasController_getMediasByCategories
      summary: "[User] Get medias for categories"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a4
  /medias/search:
    get:
      operationId: MediasController_getSearchQuery
      summary: "[User] Get all medias corresponding to query"
      parameters:
        - name: skip
          required: false
          in: query
          schema:
            type: number
        - name: limit
          required: false
          in: query
          schema:
            type: number
        - name: query
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
  /medias/adminSearch:
    get:
      operationId: MediasController_adminSearchQuery
      summary: "[User] Search for medias in admin mode"
      parameters:
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
  /medias/featured:
    get:
      operationId: MediasController_getFeatured
      summary: "[User] Get n of featured medias"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a4
  /medias/showcase:
    get:
      operationId: MediasController_getShowcase
      summary: "[User] Get all minified medias"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a4
  /medias/updateAll:
    get:
      operationId: MediasController_updateAllMedias
      summary: "[Admin] Update all medias with new values"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a4
  "/medias/{id}":
    get:
      operationId: MediasController_getMedia
      summary: "[User] Get a specific media by id"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
    delete:
      operationId: MediasController_deleteMedia
      summary: "[Admin] Delete a specific media by id"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
  "/medias/search/{query}":
    get:
      operationId: MediasController_searchQuery
      summary: "[User] Search for medias"
      parameters:
        - name: query
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
  "/medias/stream/{location}/*":
    get:
      operationId: MediasController_getStream
      summary: "[User] Stream media file"
      parameters:
        - name: location
          required: true
          in: path
          schema:
            type: string
        - name: accept-encoding
          required: true
          in: header
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a4
  /tvs:
    get:
      operationId: TvsController_getAll
      summary: "[User] Find all tvs stored in database"
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        &a5
        - Tvs
    post:
      operationId: TvsController_add
      summary: "[Admin] Add a tv in database from TMDB"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTvDto"
      responses:
        "201":
          description: ""
      tags: *a5
  "/tvs/{id}/add/{si}":
    get:
      operationId: TvsController_addTvSeason
      summary: "[Admin] Add a season to tv data"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: si
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a5
  "/tvs/{id}/add/{si}/{ei}":
    post:
      operationId: TvsController_addTvEpisode
      summary: "[Admin] Add episode to tv data"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: si
          required: true
          in: path
          schema:
            type: number
        - name: ei
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddEpisodeTvDto"
      responses:
        "201":
          description: ""
      tags: *a5
  /movies:
    get:
      operationId: MoviesController_getAll
      summary: "[User] Find all movies stored in database"
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        &a6
        - Movies
    post:
      operationId: MoviesController_add
      summary: "[Admin] Add a movie in database from TMDB"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMovieDto"
      responses:
        "201":
          description: ""
      tags: *a6
  /tmdb/search:
    get:
      operationId: TmdbController_searchQuerry
      summary: "[Admin] Search in TMDB API for movies & tvs"
      parameters:
        - name: type
          required: true
          in: query
          schema:
            type: string
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - Tmdb
  /processing/onlineSearch:
    get:
      operationId: ProcessingController_getOnlineSearchResults
      summary: "[Admin] Engage a scrapping request to search movies"
      parameters:
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        &a7
        - Processing
  /processing/initialData:
    get:
      operationId: ProcessingController_getInitialData
      summary: "[Admin] Get initial processing data"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a7
  /processing/onlineSearch/getmediaLink:
    post:
      operationId: ProcessingController_getmediaLink
      summary: "[Admin] Get uptobox premium link"
      parameters: []
      responses:
        "201":
          description: ""
      tags: *a7
  /processing/localSearch:
    get:
      operationId: ProcessingController_getLocalSearchResults
      summary: "[Admin] Search in hard space for files"
      parameters:
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a7
  /processing/startQueue:
    get:
      operationId: ProcessingController_startQueue
      summary: "[Admin] Start processing queue"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a7
  /processing/stopQueue:
    get:
      operationId: ProcessingController_stopQueue
      summary: "[Admin] Stop processing queue"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a7
  "/processing/removeFromQueue/{id}":
    delete:
      operationId: ProcessingController_removeFromQueue
      summary: "[Admin] Stop processing queue"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a7
  /processing/clearQueue:
    get:
      operationId: ProcessingController_clearQueue
      summary: "[Admin] Clear all unprocessing files"
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a7
  "/processing/startGeneration/{id}/{name}":
    get:
      operationId: ProcessingController_startGeneration
      summary: "[Admin] Start generation of extra streams"
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a7
info:
  title: HollyFilms API
  description: The HollyFilms API description
  version: "0.1"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    cookie:
      type: apiKey
      in: cookie
      name: connect.sid
  schemas:
    UpdateMeDto:
      type: object
      properties:
        firstname:
          type: string
          description: User first name
          example: John
        lastname:
          type: string
          description: User last name
          example: Doe
        username:
          type: string
          description: User nickname
          example: Johnny
        newPassword:
          type: string
          description: New user password
          example: "123456"
        newPasswordConfirm:
          type: string
          description: New user password confirmation
          example: "123456"
      required:
        - firstname
        - lastname
        - username
        - newPassword
        - newPasswordConfirm
    CreateProfileDto:
      type: object
      properties:
        firstname:
          type: string
          description: User first name
          example: John
        lastname:
          type: string
          description: User last name
          example: Doe
        username:
          type: string
          description: User nickname
          example: Johnny
      required:
        - firstname
        - lastname
        - username
    CreateUserDto:
      type: object
      properties:
        email:
          type: string
          description: User email
          example: exemple.test@gmail.com
        firstname:
          type: string
          description: User first name
          example: John
        lastname:
          type: string
          description: User last name
          example: Doe
        username:
          type: string
          description: User nickname
          example: Johnny
        password:
          type: string
          description: User password
          example: "123456"
        roles:
          type: array
          description: User roles
          example:
            - user
            - admin
          items:
            type: string
            enum:
              - user
              - admin
      required:
        - email
        - firstname
        - lastname
        - username
        - password
        - roles
    UpdateUserDto:
      type: object
      properties:
        email:
          type: string
          description: User email
          example: exemple.test@gmail.com
        firstname:
          type: string
          description: User first name
          example: John
        lastname:
          type: string
          description: User last name
          example: Doe
        username:
          type: string
          description: User nickname
          example: Johnny
        password:
          type: string
          description: User password
          example: "123456"
        roles:
          type: array
          description: User roles
          example:
            - user
            - admin
          items:
            type: string
            enum:
              - user
              - admin
      required:
        - email
        - firstname
        - lastname
        - username
        - password
        - roles
    LoginAuthDto:
      type: object
      properties:
        email:
          type: string
          description: User email
          example: exemple.test@gmail.com
        password:
          type: string
          description: User password
          example: "123456"
      required:
        - email
        - password
    CurrentUser:
      type: object
      properties:
        profileUniqueId:
          type: string
          description: Current profile's unique id
          example: 5e9f8f8f8f8f8f8f8f8f8f8f8
        isDefault:
          type: boolean
          description: Is the profile the default one
          example: false
        firstname:
          type: string
          description: The user's first name
          example: John
        lastname:
          type: string
          description: The user's last name
          example: Doe
        username:
          type: string
          description: The user's username
          example: johndoe
        picture:
          type: string
          description: Profile picture url
          example: profile/wxcdkjhqzu
        color:
          type: string
          description: Color profile color
          example: "#ff0000"
        playedMedias:
          description: Array of medias that the user has played
          type: array
          items:
            type: string
        mediasInList:
          description: Array of medias that the user added to his list
          type: array
          items:
            type: string
        likedMedias:
          description: Array of medias that the user liked
          type: array
          items:
            type: string
        _id:
          type: string
          description: The user's id
          example: 5e9f8f8f8f8f8f8f8f8f8f8f8
        email:
          type: string
          description: The user's email
          example: exemplle.test@gmail.com
        roles:
          description: The user's roles
          example:
            - user
            - admin
          type: array
          items:
            type: string
        isAdmin:
          type: boolean
          description: Is the user an Admin
          example: "true"
        isActivated:
          type: boolean
          description: Is the user activated
          example: "true"
      required:
        - profileUniqueId
        - isDefault
        - firstname
        - lastname
        - username
        - picture
        - color
        - playedMedias
        - mediasInList
        - likedMedias
        - _id
        - email
        - roles
        - isAdmin
        - isActivated
    RegisterAuthDto:
      type: object
      properties:
        email:
          type: string
          description: User email
          example: exemple.test@gmail.com
        firstname:
          type: string
          description: User first name
          example: John
        lastname:
          type: string
          description: User last name
          example: Doe
        username:
          type: string
          description: User nickname
          example: Johnny
        password:
          type: string
          description: User password
          example: "123456"
        passwordConfirm:
          type: string
          description: User password confirmation
          example: "123456"
      required:
        - email
        - firstname
        - lastname
        - username
        - password
        - passwordConfirm
    ResetPasswordDto:
      type: object
      properties:
        email:
          type: string
          description: User email
          example: exemple.test@gmail.com
      required:
        - email
    ChangePasswordAuthDto:
      type: object
      properties:
        email:
          type: string
          description: User email
          example: exemple.test@gmail.com
        token:
          type: string
          description: Change password token
          example: b7wCwIHaRkhhCJW5IfZN8LzehT1SoE98Y4ZfmrCE8X9gj14TrWqBBdbhXzjm2vzb
        newPassword:
          type: string
          description: New user password
          example: "12345612"
        newPasswordConfirm:
          type: string
          description: New user password confirmation
          example: "123456"
      required:
        - email
        - token
        - newPassword
        - newPasswordConfirm
    AddTvDto:
      type: object
      properties:
        tmdbId:
          type: number
          description: TV id in tmdb
          example: 13493
      required:
        - tmdbId
    AddEpisodeTvDto:
      type: object
      properties:
        filePath:
          type: string
          description: Path of the media to add
          example: /media/test/test.mp4
      required:
        - filePath
    AddMovieDto:
      type: object
      properties:
        tmdbId:
          type: number
          description: Movie id in tmdb
          example: 13493
        filePath:
          type: string
          description: filePath of the movie
          example: /media/13493.mp4
      required:
        - tmdbId
        - filePath
